import { AbstractNotificationProviderService } from "@medusajs/framework/utils"
import { Logger } from "@medusajs/framework/types"
import nodemailer from "nodemailer"

type SMTPOptions = {
    host: string
    port: number
    secure: boolean
    auth: {
        user: string
        pass: string
    }
}

class SMTPNotificationProviderService extends AbstractNotificationProviderService {
    static identifier = "email" // Ensure this matches medusa-config.ts
    protected logger_: Logger
    protected options_: SMTPOptions
    protected transporter_: nodemailer.Transporter

    constructor({ logger }: { logger: Logger }, options: SMTPOptions) {
        super()
        this.logger_ = logger
        this.options_ = options
        this.transporter_ = nodemailer.createTransport({
            host: this.options_.host,
            port: this.options_.port,
            secure: this.options_.secure, // Port 465 requires `secure: true`
            auth: {
                user: this.options_.auth.user,
                pass: this.options_.auth.pass,
            },
        })
        this.logger_.info(`üìß [SMTP Initialized] SMTP Notification Provider Loaded.`)
        this.logger_.info(`üîß [SMTP Settings] Host: ${this.options_.host}, Port: ${this.options_.port}`)
    }

    async send(data) {
        const { to, channel, template, data: emailData } = data

        try {
            this.logger_.info(`üì§ [Sending Email] Preparing to send email to: ${to}`)
            this.logger_.debug(`üì® [Email Template] ${template}`)

            const emailHtml = this.getTemplate(emailData, template)

            const info = await this.transporter_.sendMail({
                from: this.options_.auth.user,
                to,
                subject: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
                html: emailHtml,
            })

            this.logger_.info(`‚úÖ [Email Sent] Message ID: ${info.messageId}, Sent to: ${to}`)
            return { id: info.messageId }
        } catch (error) {
            this.logger_.error(`‚ùå [Error] Failed to send email to ${to}: ${error.message}`)
            return {}
        }
    }

    getTemplate(data, template) {
        this.logger_.debug(`üñºÔ∏è [–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞] –ó–∞–ø—Ä–æ—à–µ–Ω —à–∞–±–ª–æ–Ω: ${template}`)
        this.logger_.debug(`üñºÔ∏è –î–∞–Ω–Ω—ã–µ:`, data)

        switch (template) {
            case "order-placed":
                this.logger_.info(`üì© [–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —à–∞–±–ª–æ–Ω] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞`)
                return `
                <h1>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω</h1>
                <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!</p>
                <p><strong>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</strong> ${data.order.id}</p>
                <p><strong>–°—É–º–º–∞:</strong> $${(data.order.total / 100).toFixed(2)}</p>

                <h2>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</h2>
                <ul>
                    ${data.order.items.map(item => `
                        <li>
                            <strong>${item.title}</strong> - ${item.quantity} —à—Ç. x $${(item.unit_price / 100).toFixed(2)}
                        </li>
                    `).join('')}
                </ul>

                <p>–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –≤–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</p>
            `;

            case "order-shipped":
                this.logger_.info(`üì© [–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —à–∞–±–ª–æ–Ω] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞`)
                return `
                <h1>–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</h1>
                <p>–í–∞—à –∑–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º <strong>${data.order.id}</strong> –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</p>
                <p>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –µ–≥–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–æ–º–µ—Ä—É:</p>
                <p><strong>–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä:</strong> ${data.tracking_number}</p>

                <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</p>
            `;

            case "order-delivered":
                this.logger_.info(`üì© [–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —à–∞–±–ª–æ–Ω] –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞`)
                return `
                <h1>–í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω</h1>
                <p>–í–∞—à –∑–∞–∫–∞–∑ <strong>${data.order.id}</strong> —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.</p>
                <p>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.</p>

                <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</p>
            `;

            default:
                this.logger_.warn(`‚ö†Ô∏è [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${template}`)
                return `<p>–û—à–∏–±–∫–∞: –®–∞–±–ª–æ–Ω ${template} –Ω–µ –Ω–∞–π–¥–µ–Ω.</p>`;
        }
    }
}

export default SMTPNotificationProviderService
